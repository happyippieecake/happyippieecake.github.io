name: Deploy PHP Native to cPanel

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_upload:
        description: 'Force upload all PHP files'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Determine Deployment Type
      id: deploy_mode
      run: |
        if [[ "${{ github.event.inputs.force_upload }}" == "true" ]]; then
          echo "deployment_type=force_all_php" >> $GITHUB_OUTPUT
        elif [[ $(git diff --name-only HEAD~1 HEAD | grep -E '\.(php|html|css|js)$' | wc -l) -gt 5 ]]; then
          echo "deployment_type=full" >> $GITHUB_OUTPUT
        else
          echo "deployment_type=smart" >> $GITHUB_OUTPUT
        fi

    - name: Smart Server Sync
      id: smart_deploy
      if: steps.deploy_mode.outputs.deployment_type == 'smart'
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_wait_seconds: 20
        command: |
          sudo apt-get update && sudo apt-get install -y lftp
          lftp -e "
          set ftp:ssl-allow no;
          open ${{ secrets.SERVER }};
          user ${{ secrets.USERNAME }} ${{ secrets.PASSWORD }};
          lcd ./;

          echo 'Starting Happieecake clean deployment...';
          echo 'Current timestamp:' \$(date);

          # Step 1: Check current files on server
          echo 'Current files on server BEFORE cleanup:';
          ls -la || echo 'Cannot list files';
          echo 'Current PHP files on server:';
          ls -la *.php || echo 'No PHP files found';

          # Step 2: Check and preserve db_config.php
          echo 'Checking for existing db_config.php...';
          ls -la db_config.php || echo 'No db_config.php found on server';

          # Step 2: Remove ALL files EXCEPT db_config.php
          echo 'Cleaning server (removing all files EXCEPT db_config.php)...';

          rm -f *.html || echo 'No HTML files to remove';
          rm -f *.css || echo 'No CSS files to remove';
          rm -f *.js || echo 'No JS files to remove';

          echo 'Backing up db_config.php...';
          get db_config.php db_config_backup.php || echo 'No db_config.php to backup';

          echo 'Removing ALL PHP files...';
          ls -la *.php || echo 'No PHP files found';
          mrm *.php || echo 'No PHP files to remove';

          echo 'Restoring db_config.php from backup...';
          put db_config_backup.php db_config.php || echo 'No backup to restore';
          rm -f db_config_backup.php || echo 'No backup file to clean';

          rm -f *.sql || echo 'No SQL files to remove';
          rm -f *.ico || echo 'No ICO files to remove';
          rm -f *.png *.jpg *.jpeg *.gif || echo 'No image files to remove';
          rm -f *.md LICENSE README.md || echo 'No documentation files to remove';
          rm -f .htaccess || echo 'No .htaccess to remove';
          rm -rf Gambar || echo 'Gambar folder may not exist';

          echo 'Verifying db_config.php preservation...';
          ls -la db_config.php || echo 'db_config.php not found (this is OK if it was never created)';

          # Step 3: Upload ALL files from GitHub (fresh deployment)
          echo 'Uploading ALL files from GitHub...';

          echo 'Uploading HTML files...';
          mput *.html || echo 'No HTML files to upload';

          echo 'Uploading CSS and JS files...';
          mput *.css || echo 'No CSS files to upload';
          mput *.js || echo 'No JS files to upload';

          echo 'Uploading favicon...';
          mput *.ico || echo 'No ICO files to upload';

          echo 'Uploading PHP files from GitHub...';
          mput *.php || echo 'No PHP files to upload';

          echo 'Uploading database file...';
          put database.sql || echo 'No database.sql to upload';

          echo 'Uploading .htaccess...';
          put .htaccess || echo 'No .htaccess to upload';

          echo 'Uploading Gambar folder...';
          mirror --reverse --verbose --parallel=2 Gambar/ Gambar/ || echo 'No Gambar folder to upload';

          echo 'Final verification - checking all files after deployment:';
          echo 'All files on server AFTER deployment:';
          ls -la || echo 'Cannot list files';
          echo 'PHP files on server AFTER deployment:';
          ls -la *.php || echo 'No PHP files found';
          echo 'Checking db_config.php specifically...';
          ls -la db_config.php || echo 'db_config.php not found (create manually in cPanel)';
          echo 'Deployment completed at:' \$(date);

          quit
          "

    - name: Deployment Success
      if: success()
      run: |
        echo "âœ… Happieecake website sync completed!"
        echo "âœ… Happieecake sync completed!"
        echo "ðŸ§¹ Website files updated on server"